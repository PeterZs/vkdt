#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#extension GL_EXT_ray_tracing             : enable
#extension GL_EXT_ray_query               : enable
#extension GL_EXT_shader_atomic_float     : enable
#extension GL_EXT_shader_explicit_arithmetic_types: enable

#include "shared.glsl"
#include "shared/render3d.glsl"
#include "colour.glsl"
#include "complex.glsl"
#include "fresnel.glsl"
#include "volume-fwd.glsl"
#include "volume.glsl"
#include "env.glsl"
#include "camera-fwd.glsl"
#include "camera.glsl"

#define NEE 0 // sampling only
// #define NEE 1 // nee only
// #define NEE 2 // both and MIS

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{ 
  int frame;
} global;

layout(std140, set = 0, binding = 1) uniform params_t
{ 
  vec4 cam_x;
  vec4 cam_w;
  vec4 cam_u;
  vec4 fog;
  float cltime;
  int spp;
  int wd;
  int ht;
} params;

#include "config.h"

layout(set = 1, binding = 0) buffer buf_fb_t { float v[]; } buf_fb;
layout(set = 1, binding = 1) uniform sampler2D img_blue;
layout(set = 1, binding = 2) uniform sampler2D img_tex[];
layout(set = 1, binding = 3) uniform writeonly image2D img_aov;
layout(set = 1, binding = 4) uniform sampler2D img_env;
layout(set = 1, binding = 5) uniform sampler2D img_dn;
layout(set = 1, binding = 6) buffer buf_mat_t { gbuf_t v[]; } buf_mat; // material+st
layout(set = 2, binding = 0) uniform accelerationStructureEXT rt_accel;
layout(set = 2, binding = 1) buffer buf_vtx_t { rtgeo_vtx_t v[]; } buf_vtx[];

#include "shared/fb.glsl" // depends on buf_fb
#include "raytrace.glsl"  // depends on rt_accel and buf_vtx
#include "material.glsl"  // depends on img_tex

// xorshift64star
float rand64(inout uint64_t x)
{
  x ^= x >> 12;
  x ^= x << 25;
  x ^= x >> 27;
  return float((x * 0x2545F4914F6CDD1Dul)>>32)/4294967296.0;
}

vec4 dithermask(vec4 xi, ivec2 rp)
{
  return fract(xi + texelFetch(img_blue, rp, 0));
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  ivec2 fbdim = ivec2(params.wd, params.ht);
  if(any(greaterThanEqual(ipos, fbdim))) return;

  uint64_t seed = 19937 * global.frame + 133700000 * ipos.x + ipos.y * 70007;
  // blue noise dither mask
  const ivec2 rp = ivec2(ipos % ivec2(textureSize(img_blue, 0)));

  camera = camera_t(0.5, vec2(1.0, fbdim.y/float(fbdim.x)), params.cam_x.xyz, mat3(1));
  camera_setup(params.cam_x.xyz, params.cam_w.xyz, params.cam_u.xyz);

  vec3 acc_col = vec3(0.0);
  vec4 aov = vec4(1, 0, 1, 1.0);
  for(int s=0;s<params.spp;s++)
  {
    vec4 acc = vec4(0); // value of our estimator, accumulate this
    vec4 hrp = vec4(1); // hero wavelength p, only deviates from 1 if pdf is different per wavelength
    // vec4 rand = xrand(seed, rp);
    vec4 rand = vec4(rand64(seed), rand64(seed), rand64(seed), rand64(seed));
    seed = uint64_t(70000 * rand.x);
    float frame = global.frame;// + 0.5*rand.x; // 180 degree shutter
    vec4 thr = vec4(1.0);
    // dithermask shows *no* difference for stratified hwl:
    uint64_t seed2 = 19937*global.frame;
    vec4 lambda = colour_sample_lambda(dithermask(vec4(rand64(seed2)), rp), thr, hrp);
    // vec4 lambda = colour_sample_lambda(dithermask(vec4(rand64(seed2)), rp).xxxx, thr, hrp);
    // mono wl:
    // vec4 lambda = colour_sample_lambda(vec4(rand64(seed)), thr, hrp);
    // vec4 lambda = colour_sample_lambda(vec4(rand64(seed), rand64(seed), rand64(seed), rand64(seed)), thr, hrp);
    vec4 x;
    vec3 w, n, ng; // ray position, direction, hit normal
    vec2 st;       // texture coordinates
    // vec2 uv = (ipos+0.5)/vec2(push.wd, pus.ht) - 0.5;
    thr *= camera_sample_xw((ipos+filter_bh_sample(rand.yz))/vec2(fbdim), x, w);

    aov.rgb = (1.0+w)/2.0;
    float pdf_w = -1.0;

    for(int i=0;i<3;i++)
    { // for a number of bounces
      uvec4 mat;
      uint flags = 0;
      const float tmax = 1e10;//volume_sample_dist(x.xyz, w, rand64(seed));
      float dist = tmax;

      if(i == 0)
      { // init first intersection vertex: read geo intersection info
        vec2 dn = texelFetch(img_dn, ipos, 0).rg;// TODO with camera jitter as above?
        dist = dn.x;
        n  = geo_decode_normal(floatBitsToUint(dn.y));
        ng = geo_decode_normal(buf_mat.v[ipos.x+fbdim.x*ipos.y].ng);
        uint inside = (buf_mat.v[ipos.x+fbdim.x*ipos.y].m2 & 0x80000000) > 0 ? 1 : 0;
        mat = uvec4(
            buf_mat.v[ipos.x+fbdim.x*ipos.y].m0,
            buf_mat.v[ipos.x+fbdim.x*ipos.y].m1,
            buf_mat.v[ipos.x+fbdim.x*ipos.y].m2 & 0x7fffffff,
            inside);
        uint stui = buf_mat.v[ipos.x+fbdim.x*ipos.y].st;
        if(stui == -1u) n = vec3(0);
        st = unpackUnorm2x16(stui);
        if(dist < tmax) flags = 0;
        else          { flags = s_volume; dist = tmax; }
        if(dist >=1e10) flags = s_envmap;
        // flags=s_envmap;
        x.xyz = x.xyz + dist * w + 0.001*ng;
      }
      else 
      {
        if(cast_ray(w, x.xyz, dist, n, ng, st, mat)) flags = 0;
        else if(dist >=1e10) flags = s_envmap;
      }

      vec3 tmp;
      mat_state_t ms = mat_init(mat, st, n, flags, lambda, w, tmp);
      if((flags & s_envmap) > 0)
      { // escaped to environment map, eval MIS
#if NEE==0
        float mis = 1; // only sample
#elif NEE==1
        float mis = i>0?0:1; // NEE only
#else
        float pdf_env = pdf_w <= 0.0 ? 0.0 : env_pdf(w, img_env);
        float mis = pdf_w <= 0.0 ? 1.0 : pdf_w / (pdf_env + pdf_w);
#endif
        acc += thr * mis * ms.col_emit;
        break;
      }
      if((flags & s_emit) != 0)
      { // intersected a light source, that's where we stop
        acc += thr * ms.col_emit;
        if(i == 0) aov.rgb = ms.col_emit.rgb;
        break;
      }
#if NEE!=0
      { // NEE to envmap
        float xe;
        vec3 wo = env_sample(vec2(rand64(seed), rand64(seed)), img_env, xe);
        vec3 n2, ng2, x2 = x.xyz;
        vec2 st2;
        uvec4 m2;
        float dist2 = 1e10;
        if(!cast_ray(wo, x2, dist, n2, ng2, st2, m2))
        {
          vec3 env = env_lookup(wo, img_env);
          vec4 L = colour_upsample(env, lambda);
          float pdf_env = 1.0/xe;
          float pdf_wo = mat_pdf(ms, flags, w, n, wo, lambda.x);
#if NEE==0
          float mis = 0; // scattering only
#elif NEE==1
          float mis = 1; // NEE only
#else
          float mis = pdf_env / (pdf_wo + pdf_env);
#endif
          vec4 bsdf = mat_eval(ms, flags, w, n, wo, lambda);
          acc += thr * bsdf * max(0, dot(n, wo)) * xe * L * mis;
        }
      }
#endif

      // trace on
      rand = vec4(rand64(seed), rand64(seed), rand64(seed), rand64(seed));
      vec4 c;
      vec3 wo = mat_sample(ms, flags, w, n, lambda, rand.xyz, c);
      pdf_w = mat_pdf(ms, flags, w, n, wo, lambda.x);
      thr *= c;
      w = wo;
      // if((flags & s_transmit) > 0)
        x.xyz += 0.001*wo;
      if((dot(n, w) <= 0 || dot(ng, w) <= 0) && (flags & s_transmit) == 0)
      {
        thr = vec4(0);
        break;
      }
    }
    acc_col += colour_to_rgb(acc, lambda, hrp);
  } // end spp

  acc_col = clamp(acc_col, vec3(0.0), vec3(65000.0));

  fb_set(ipos, fbdim, vec4(acc_col, 1.0));
  imageStore(img_aov, ipos, aov);
}
