#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#extension GL_EXT_ray_tracing             : enable
#extension GL_EXT_ray_query               : enable
#extension GL_EXT_shader_atomic_float     : enable
#extension GL_EXT_shader_explicit_arithmetic_types: enable

#include "shared.glsl"
#include "shared/render3d.glsl"
#include "colour.glsl"
#include "complex.glsl"
#include "fresnel.glsl"
#include "volume-fwd.glsl"
#include "volume.glsl"
#include "env.glsl"
#include "camera-fwd.glsl"
#include "camera.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{ 
  int frame;
} global;

layout(std140, set = 0, binding = 1) uniform params_t
{ 
  vec4 cam_x;
  vec4 cam_w;
  vec4 cam_u;
  vec4 fog;
  float cltime;
  int spp;
} params;

layout(set = 1, binding = 0) buffer buf_fb_t { float v[]; } buf_fb;
layout(set = 1, binding = 1) uniform sampler2D img_blue;
layout(set = 1, binding = 2) uniform sampler2D img_tex[];
layout(set = 1, binding = 3) uniform writeonly image2D img_aov;
layout(set = 1, binding = 4) uniform sampler2D img_env;
layout(set = 2, binding = 0) uniform accelerationStructureEXT rt_accel;
layout(set = 2, binding = 1) buffer buf_vtx_t { rtgeo_vtx_t v[]; } buf_vtx[];

#include "shared/fb.glsl" // depends on buf_fb
#include "raytrace.glsl"  // depends on rt_accel and buf_vtx
#include "material.glsl"  // depends on img_tex

// xorshift64star
float rand64(inout uint64_t x)
{
  x ^= x >> 12;
  x ^= x << 25;
  x ^= x >> 27;
  return float((x * 0x2545F4914F6CDD1Dul)>>32)/4294967296.0;
}

vec4 dithermask(vec4 xi, ivec2 rp)
{
  return fract(xi + texelFetch(img_blue, rp, 0));
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  ivec2 fbdim = ivec2(imageSize(img_aov));
  if(any(greaterThanEqual(ipos, fbdim))) return;

  uint64_t seed = 19937 * global.frame + 133700000 * ipos.x + ipos.y * 70007;
  // blue noise dither mask
  const ivec2 rp = ivec2(ipos % ivec2(textureSize(img_blue, 0)));

  camera = camera_t(0.5, vec2(1.0, fbdim.y/float(fbdim.x)), params.cam_x.xyz, mat3(1));
  camera_setup(params.cam_x.xyz, params.cam_w.xyz, params.cam_u.xyz);

  vec3 acc_col = vec3(0.0);
  vec4 aov = vec4(1, 0, 1, 1.0);
  for(int s=0;s<params.spp;s++)
  {
    vec4 acc = vec4(0); // value of our estimator, accumulate this
    vec4 hrp = vec4(1); // hero wavelength p, only deviates from 1 if pdf is different per wavelength
    // vec4 rand = xrand(seed, rp);
    vec4 rand = vec4(rand64(seed), rand64(seed), rand64(seed), rand64(seed));
    seed = uint64_t(70000 * rand.x);
    float frame = global.frame;// + 0.5*rand.x; // 180 degree shutter
    vec4 thr = vec4(1.0);
    // dithermask shows *no* difference for stratified hwl:
    uint64_t seed2 = 19937*global.frame;
    vec4 lambda = colour_sample_lambda(dithermask(vec4(rand64(seed2)), rp), thr, hrp);
    // vec4 lambda = colour_sample_lambda(dithermask(vec4(rand64(seed2)), rp).xxxx, thr, hrp);
    // mono wl:
    // vec4 lambda = colour_sample_lambda(vec4(rand64(seed)), thr, hrp);
    // vec4 lambda = colour_sample_lambda(vec4(rand64(seed), rand64(seed), rand64(seed), rand64(seed)), thr, hrp);
    vec4 x;
    vec3 w, n, ng; // ray position, direction, hit normal
    vec2 st;       // texture coordinates
    // vec2 uv = (ipos+0.5)/vec2(push.wd, pus.ht) - 0.5;
    thr *= camera_sample_xw((ipos+filter_bh_sample(rand.yz))/vec2(fbdim), x, w);

    aov.rgb = (1.0+w)/2.0;

    for(int i=0;i<5;i++)
    { // for a number of bounces
      float dist = volume_sample_dist(x.xyz, w, rand64(seed));
      uvec3 mat;
      uint flags = 0;
      const float tmax = 1e6;
      if(cast_ray(w, x.xyz, dist, n, ng, st, mat))
      {
        if(dot(n,w) > 0) n = -n;
        vec3 du, dv, up = vec3(1,0,0);
        if(abs(n.x) > abs(n.y)) up = vec3(0,1,0);
        du = normalize(cross(up, n));
        dv = normalize(cross(du, n));
        if(i == 0) aov.rgb = vec3(dot(-w, n));

        vec3 wo;
#if 0 // default cosine
        {
          vec3 ws = sample_cos(vec2(rand64(seed), rand64(seed)));
          wo = mat3(du, dv, n) * ws;
          float pdf = ws.z / M_PI;
          vec3 h = normalize(wo - w);
          vec4 f = ws.z * bsdf_rough_eval(w, du, dv, n, wo, vec2(roughness)) * fresnel(0, lambda, 1.0, dot(wo, h));
          thr *= f/pdf;
        }
#endif
#if 0 // importance sampling the bsdf
        {
          float weight = 1.0;
          wo = bsdf_rough_sample(w, du, dv, n, vec2(roughness), vec2(rand64(seed), rand64(seed)), weight);
          vec3 h = normalize(wo - w);
          thr *= fresnel(0, lambda, 1.0, dot(wo, h));
          thr *= weight;
        }
#endif
#if 0 // envmap sampling
        {
          float weight = 1.0;
          wo = env_sample(vec2(rand64(seed), rand64(seed)), img_env, weight);
          thr *= max(0.0, dot(n, wo))*bsdf_rough_eval(w, du, dv, n, wo, vec2(roughness));
          thr *= weight;
        }
#endif
#if 1 // resampling thing:
        { // do both and resample!
          float w0 = 1.0, w1 = 1.0;

          uint flags = 0;
          vec3 tmp;
          mat_state_t ms = mat_init(mat, st, n, flags, lambda, vec3(0), tmp);

          // bsdf sampling
          vec4 dummy;
          vec3 wo0 = mat_sample(ms, flags, w, n, lambda, vec3(rand64(seed), rand64(seed), rand64(seed)), dummy);
          float p0 = mat_pdf(ms, flags, w, n, wo0, lambda.x);
          float ph0 = env_pdf(wo0, img_env) * (dot(wo0,n) > 0 ? 1 : 0) * dot(vec4(1), mat_eval(ms, 0, w, n, wo0, lambda));
          w0 = ph0 / p0;

          // envmap sampling
          vec3 wo1 = env_sample(vec2(rand64(seed), rand64(seed)), img_env, w1);
          float p1 = 1.0/w1;
          float ph1 = p1 * (dot(wo1,n) > 0 ? 1 : 0) * dot(vec4(1), mat_eval(ms, 0, w, n, wo1, lambda));
          w1 = ph1 / p1;

          if(rand64(seed) < w0/(w0+w1))
          {
            wo = wo0;
            vec4 f = mat_eval(ms, 0, w, n, wo0, lambda);
            thr *= f / ph0 * 0.5 * (w0 + w1);
          }
          else
          {
            wo = wo1;
            vec4 f = mat_eval(ms, 0, w, n, wo1, lambda);
            thr *= f / ph1 * 0.5 * (w0 + w1);
          }
        }
#endif
        if(i == 0) aov.rgb = (1.0+n)/2.0;
        if(dot(wo,n) <= 0.0) break; // sampled under surface
        x.xyz += 0.001 * n; // TODO only for convex regions where the terminator hack doesn't work
        w = wo;
      }
      else if(dist > tmax)
      { // escaped to environment map
        vec3 env = env_lookup(w, img_env);
        vec4 L = colour_upsample(env, lambda);
        // vec4 Lc = colour_blackbody(lambda, 6504.0); // not quite D65
        // vec4 L = pow(1.0+dot(vec3(0,0,1), w), 3.0) * 0.5 * Lc;
        acc += thr*L / float(params.spp);
        break;
      }
      else
      { // scattering in medium
        thr *= colour_upsample(vec3(1.0, 0.97, 0.6), lambda); // scattering albedo
        x.xyz += dist * w;
#if 0 // sample phase function
        const float cosu = volume_sample_phase_function_cos(vec2(rand64(seed),rand64(seed)));
        vec3 du, dv, up = vec3(1,0,0);
        if(abs(w.x) > abs(w.y)) up = vec3(0,1,0);
        du = normalize(cross(up, w));
        dv = normalize(cross(du, w));
        const float phi = 2.0*M_PI*rand64(seed);
        w = cosu * w + sqrt(1.0-cosu*cosu) * (sin(phi) * du + cos(phi) * dv);
#endif
#if 1 // resample env + phase function
        float w0 = 1.0, w1 = 1.0;

        // phase sampling
        const float cosu = volume_sample_phase_function_cos(vec2(rand64(seed),rand64(seed)));
        float p0 = volume_phase_function(cosu);
        vec3 du, dv, up = vec3(1,0,0);
        if(abs(w.x) > abs(w.y)) up = vec3(0,1,0);
        du = normalize(cross(up, w));
        dv = normalize(cross(du, w));
        const float phi = 2.0*M_PI*rand64(seed);
        vec3 wo0 = cosu * w + sqrt(1.0-cosu*cosu) * (sin(phi) * du + cos(phi) * dv);
        float ph0 = p0 * env_pdf(wo0, img_env);
        w0 = ph0 / p0;

        // envmap sampling
        vec3 wo1 = env_sample(vec2(rand64(seed), rand64(seed)), img_env, w1);
        float p1 = 1.0/w1;
        float f1 = volume_phase_function(dot(wo1, w));
        float ph1 = p1 * f1;
        w1 = f1;//ph1 / p1;

        if(rand64(seed) < w0/(w0+w1))
        {
          w = wo0;
          vec4 f = vec4(p0);
          thr *= f / ph0 * 0.5 * (w0 + w1);
        }
        else
        {
          w = wo1;
          vec4 f = vec4(w1);
          thr *= f / ph1 * 0.5 * (w0 + w1);
        }
#endif
      }
    }
    acc_col += colour_to_rgb(acc, lambda, hrp);
  } // end spp

  acc_col = clamp(acc_col, vec3(0.0), vec3(65000.0));

  fb_set(ipos, fbdim, vec4(acc_col, 1.0));
  imageStore(img_aov, ipos, aov);
}
