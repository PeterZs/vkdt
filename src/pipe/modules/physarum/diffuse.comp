#version 460
#extension GL_GOOGLE_include_directive    : enable
#include "shared.glsl"
#include "types.h"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform blk { params_t params; };
layout(push_constant, std140) uniform push_t
{
  int have_mask;
} push;
layout(set=1, binding=0) uniform sampler2D trailRead;
layout(set=1, binding=1) uniform writeonly image2D trailWrite;
layout(set=1, binding=2) uniform sampler2D img_mask;

// Shader for trail map diffusion and decay

void main()
{
  ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
  vec2 csum = vec2(0.);
  int kernelSize = 1;
  for(int i = -kernelSize; i < kernelSize; i++)
    for(int j = -kernelSize; j < kernelSize; j++)
      csum += texture(trailRead, (pos-vec2(i, j)+0.5)/vec2(imageSize(trailWrite))).xy;

  vec2 c = csum / pow(2 * kernelSize + 1.0, 2.0);

  float decayed = c.x * params.decayFactor;
  vec4 cOutput = vec4(decayed, 0.8 * decayed + 0.2 * c.y, 0, 0);
  // (It's possible to control some amount of delay with this second color component, this is used for drawing of delayed trail map.)

  if(push.have_mask != 0)
  {
    float mask = texture(img_mask, (pos+0.5)/vec2(imageSize(trailWrite))).r;
    cOutput *= mask;
  }
  imageStore(trailWrite, ivec2(gl_GlobalInvocationID.xy), cOutput);
}
