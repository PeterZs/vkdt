#version 460
#extension GL_GOOGLE_include_directive    : enable
#include "shared.glsl"
#include "types.h"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform blk { params_t p; } params;
layout(set=1, binding=0) uniform sampler2D trailRead;
layout(set=1, binding=1) uniform writeonly image2D trailWrite;

// Shader for trail map diffusion and decay

void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    vec2 csum = vec2(0.);

    float kernelSize = 1.0;

    for(float i = -kernelSize; i < kernelSize + 0.5; i += 1.0) {
        for(float j = -kernelSize; j < kernelSize + 0.5; j += 1.0) {
            csum += texture(trailRead, (pos - vec2(i, j)+0.5)/vec2(imageSize(trailWrite))).xy;
        }
    }

    vec2 c = csum / pow(2 * kernelSize + 1.0, 2.0);

    float decayed = c.x * params.p.decayFactor;
    vec4 cOutput = vec4(decayed, 0.8 * decayed + 0.2 * c.y, 0, 0);
	// (It's possible to control some amount of delay with this second color component, this is used for drawing of delayed trail map.)

    imageStore(trailWrite, ivec2(gl_GlobalInvocationID.xy), cOutput);
}
