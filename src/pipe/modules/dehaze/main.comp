#version 460
#extension GL_GOOGLE_include_directive       : enable
#extension GL_EXT_nonuniform_qualifier       : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform params_t
{
  vec4  haze;
  float omega;
  float t0;
} params;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

shared float shm_black[2];

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;
  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  vec3 A = max(vec3(1e-3), params.haze.rgb);
  float black = min(rgb.r/A.r, min(rgb.g/A.g, rgb.b/A.b));
  black = subgroupMin(black);
  if(gl_SubgroupInvocationID == 0)
    shm_black[gl_SubgroupID] = black;
  barrier();
  black = min(shm_black[0], shm_black[1]);
  
  float t = 1.0 - params.omega * black;
  rgb = (rgb - A)/max(t, params.t0) + A;
  // rgb = vec3(t);

  imageStore(img_out, ipos, vec4(rgb, 1));
}
