#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  uvec4 nspots;
  vec4 spot[20];
  float picked[60]; // actually 3-strided colours
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform sampler2D img_coeff;
layout(set = 1, binding = 2) uniform writeonly image2D img_out;
#include "shared/upsample.glsl"

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  // on black
  vec3 rgb = vec3(0.0);
  // on white
  // vec3 rgb = vec3(1.0);

  for(int i=0;i<params.nspots.x;i++)
  {
    // read colour from texture
    vec3 picked_rgb = vec3(
      texelFetch(img_in, ivec2(i, 0), 0).r,
      texelFetch(img_in, ivec2(i, 1), 0).r,
      texelFetch(img_in, ivec2(i, 2), 0).r);

    // or else read colour from params (requires round trip to cpu)?
    // params.pick[]

    vec4 coeff = fetch_coeff(picked_rgb);
    vec3 cyl = vec3(coeff.x, coeff.z - coeff.y*coeff.y /(4.0 * coeff.x), -coeff.y / (2.0*coeff.x));

    float lambda = 360.0 + ipos.x/float(imageSize(img_out).x) * (830.0 - 360.0);
    float x = (coeff.x * lambda + coeff.y) * lambda + coeff.z;
    float ddx = abs(0.5 * pow(x*x + 1.0, -3.0/2.0) * (2.0*coeff.x*(lambda-cyl.z)));
    float val = sigmoid_eval(coeff, lambda);
    ddx *= coeff.w;

    const float w = 4.0; // stroke width
    const float t = w*max(1.0, imageSize(img_out).y*ddx);
    float d = abs((1.0-val) * imageSize(img_out).y - ipos.y);
    // on black:
    rgb = max(rgb, picked_rgb * vec3(pow(smoothstep(t, 0.0, d), 3)));
    // on white:
    // rgb = mix(rgb, picked_rgb, vec3(pow(smoothstep(t, 0.0, d), 3)));
    // shade below:
    if(ipos.y / float(imageSize(img_out).y) > 1.0-val)
      rgb = mix(rgb, picked_rgb, 0.1);
  }
  imageStore(img_out, ipos, vec4(rgb, 1));
}

