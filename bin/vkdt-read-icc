#!/usr/bin/python3
# parse an icc profile (which you created using displaycal or so)
# and output matrix + gamma values for transformation in the fragment shader.
import os, sys
import numpy
import shutil
import subprocess
import platform

def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False

if len(sys.argv) < 2:
  print('usage: vkdt read-icc your-display.icc [gamma]')
  print('requires the iccdump utility and will write display.profile files for vkdt')
  sys.exit(1)

profile=sys.argv[1]

# from PIL import ImageCms
# XXX how to get the data? the docs lie and we get a useless ImageCmsProfile
# instead of a CmsProfile object here
# prf = ImageCms.getOpenProfile(profile)
# print(prf)

# probably easier to go the bash way:
# bradford adaptation
proc = os.popen('iccdump  -v3 -t rTRC -t gTRC -t bTRC '+profile, 'r', 1)
got = proc.read().replace(',', '')
proc.close()
tokens = got.split()

if isfloat(tokens[5]):
	gamma = numpy.array([
	float(tokens[5]),
	float(tokens[11]),
	float(tokens[17])])
elif len(sys.argv) >= 3:
	gamma = numpy.array([
	float(sys.argv[2]),
	float(sys.argv[2]),
	float(sys.argv[2])])
else:
	print('this icc does not contain a simple gamma value. please specify (optional 2nd parameter)!')
	sys.exit(1)

proc = os.popen('iccdump -v3 -t wtpt -t rXYZ -t gXYZ -t bXYZ '+profile, 'r', 1)
got = proc.read().replace(',', '')
proc.close()
tokens = got.split()
wt = numpy.array([
float(tokens[6]), float(tokens[7]), float(tokens[8])])

A = numpy.matrix([
[float(tokens[19]), float(tokens[20]), float(tokens[21])],
[float(tokens[32]), float(tokens[33]), float(tokens[34])],
[float(tokens[45]), float(tokens[46]), float(tokens[47])]]).T

# data extracted from ITU-R_BT2020(beta).icc available at https://www.color.org/chardata/rgb/BT2020.xalter
# we're using the already D50 adapted rec2020 matrix (with negative primaries), because it undoes precisely
# what the icc profile connection space (D50 XYZ) caused on the other end:
Rec2020_to_PCS = numpy.matrix([
[ 0.67345, 0.16565, 0.12505],
[ 0.27902, 0.67535, 0.04561],
[ -0.00194, 0.02998, 0.79689],
])
PCS_to_display = numpy.linalg.inv(A)
O = PCS_to_display @ Rec2020_to_PCS

print('rec2020 to display matrix')
print(O)
print('gamma')
print(gamma)

out = open('display.profile', 'w')
out.write('%f %f %f\n'%(1.0/gamma[0], 1.0/gamma[1], 1.0/gamma[2]))
out.write('%f %f %f\n'%(O[0,0], O[0,1], O[0,2]))
out.write('%f %f %f\n'%(O[1,0], O[1,1], O[1,2]))
out.write('%f %f %f\n'%(O[2,0], O[2,1], O[2,2]))
out.close()

# check if the operating system is not Windows
if platform.system() != "Windows":
    # find monitor connection name with xrandr
    proc = subprocess.Popen(['xrandr'], stdout=subprocess.PIPE)
    out, err = proc.communicate()
    lines = out.decode().split('\n')
    monitor_names = [line.split(' ')[0] for line in lines if ' connected' in line]

    # ask user for which monitor the profile should be installed
    print("available monitors:")
    for i, monitor_name in enumerate(monitor_names):
        print(f"{i+1}. {monitor_name}")
    choice = 0
    if len(monitor_names) > 1:
      choice = int(input("for which monitor do you want to install the profile? ")) - 1
    monitor_name = monitor_names[choice]

    # path to directory ./config/vkdt in the user directory
    config_dir = os.path.expanduser('~/.config/vkdt')

    # check if the directory exists, if not, create
    if not os.path.exists(config_dir):
        os.makedirs(config_dir)

    new_filename = config_dir + '/display.' + monitor_name

    # copy the file to ./config/vkdt
    print("installing display.profile as "+new_filename)
    shutil.copy('display.profile', new_filename)

